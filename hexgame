#!/usr/bin/env node
'use strict'

const readline = require('readline')
const bits = 8
const nibbles = bits / 4
const mask = Math.pow(2, bits) - 1
const print = console.log

const bitwise = {
  not: function (a) {
    return ~a & mask
  },
  and: function (a, b) {
    return a & b
  },
  or: function (a, b) {
    return a | b
  },
  xor: function (a, b) {
    return a ^ b
  }
}

const leftPadWithZeroes = function (a) {
  const pad = new Array(nibbles + 1).join('0')
  return pad.substring(`${a}`.length) + a
}

const hexToString = function (a) {
  return '0x' + leftPadWithZeroes(a.toString(16))
}

const bitwiseFunctionAsString = {
  not: function (a) {
    return `~${hexToString(a)}`
  },
  and: function (a, b) {
    return `${hexToString(a)} & ${hexToString(b)}`
  },
  or: function (a, b) {
    return `${hexToString(a)} | ${hexToString(b)}`
  },
  xor: function (a, b) {
    return `${hexToString(a)} ^ ${hexToString(b)}`
  }
}

const printProblem = function () {
  const a = Math.floor(Math.random() * Math.pow(2, bits))
  const b = Math.floor(Math.random() * Math.pow(2, bits))
  const operationIndex = Math.floor(Math.random() * Object.keys(bitwise).length)
  const operationName = Object.keys(bitwise)[operationIndex]
  const operation = bitwise[operationName]
  const operands = [a, b].slice(0, operation.length)
  const problem = bitwiseFunctionAsString[operationName].apply(this, operands)
  const answer = operation.apply(this, operands)

  const rl = readline.createInterface({ input: process.stdin, output: process.stdout })
  rl.question(`${problem} = `, (response) => {
    if (parseInt(response, 16) === answer) {
      print('✓ Correct!')
    } else {
      print('✗ Incorrect')
      print(`${problem} = ${hexToString(answer)}`)
    }

    rl.close()
  })
}

printProblem()
